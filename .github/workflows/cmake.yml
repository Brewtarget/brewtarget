name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install NSISLog Plugin
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
          cp \
            build-scripts/windows/vendor/NSISlog/plugin/nsislog.dll \
            "C:/Program Files (x86)/NSIS/Plugins/x86-ansi"
          cp \
            build-scripts/windows/vendor/NSISLocate/Plugin/locate.dll \
            "C:/Program Files (x86)/NSIS/Plugins/x86-ansi"
          cp \
            build-scripts/windows/vendor/NSISLocate/Include/Locate.nsh \
            "C:/Program Files (x86)/NSIS/Include"

      - name: Apply Patches
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./build-scripts/windows/apply-patches.sh $GITHUB_WORKSPACE

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: win64_mingw81
          version: 5.15.2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake \
            -G "MinGW Makefiles" \
            -DDO_RELEASE_BUILD=ON \
            -DCMAKE_PREFIX_PATH=$Qt5_Dir \
            -DMINGW_BIN_DIR=$Qt5_Dir/bin \
            $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          make package

      - name: Archive the installer
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: Brewtarget Windows Installer
          path: build/brewtarget_*.exe

      - name: Recover the debris
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: build-results
          path: build
